// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Repro.proto

#include "Repro.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace repro {
namespace proto {
        template <typename>
PROTOBUF_CONSTEXPR V3::V3(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.x_)*/ 0,
      /*decltype(_impl_.y_)*/ 0,
      /*decltype(_impl_.z_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct V3DefaultTypeInternal {
  PROTOBUF_CONSTEXPR V3DefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~V3DefaultTypeInternal() {}
  union {
    V3 _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 V3DefaultTypeInternal _V3_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR KeyPoint::KeyPoint(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.color_)*/ nullptr,
    } {}
struct KeyPointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KeyPointDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~KeyPointDefaultTypeInternal() {}
  union {
    KeyPoint _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KeyPointDefaultTypeInternal _KeyPoint_default_instance_;
}  // namespace proto
}  // namespace repro
static ::_pb::Metadata file_level_metadata_Repro_2eproto[2];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_Repro_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_Repro_2eproto = nullptr;
const ::uint32_t TableStruct_Repro_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::repro::proto::V3, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::repro::proto::V3, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::repro::proto::V3, _impl_.y_),
    PROTOBUF_FIELD_OFFSET(::repro::proto::V3, _impl_.z_),
    PROTOBUF_FIELD_OFFSET(::repro::proto::KeyPoint, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::repro::proto::KeyPoint, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::repro::proto::KeyPoint, _impl_.color_),
    0,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::repro::proto::V3)},
        {11, 20, -1, sizeof(::repro::proto::KeyPoint)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::repro::proto::_V3_default_instance_._instance,
    &::repro::proto::_KeyPoint_default_instance_._instance,
};
const char descriptor_table_protodef_Repro_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\013Repro.proto\022\013repro.proto\"%\n\002V3\022\t\n\001x\030\001 "
    "\001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\"*\n\010KeyPoint\022\036\n"
    "\005color\030\002 \001(\0132\017.repro.proto.V3b\006proto3"
};
static ::absl::once_flag descriptor_table_Repro_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Repro_2eproto = {
    false,
    false,
    117,
    descriptor_table_protodef_Repro_2eproto,
    "Repro.proto",
    &descriptor_table_Repro_2eproto_once,
    nullptr,
    0,
    2,
    schemas,
    file_default_instances,
    TableStruct_Repro_2eproto::offsets,
    file_level_metadata_Repro_2eproto,
    file_level_enum_descriptors_Repro_2eproto,
    file_level_service_descriptors_Repro_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Repro_2eproto_getter() {
  return &descriptor_table_Repro_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Repro_2eproto(&descriptor_table_Repro_2eproto);
namespace repro {
namespace proto {
// ===================================================================

class V3::_Internal {
 public:
};

V3::V3(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:repro.proto.V3)
}
V3::V3(const V3& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:repro.proto.V3)
}
inline void V3::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0},
      decltype(_impl_.y_){0},
      decltype(_impl_.z_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
V3::~V3() {
  // @@protoc_insertion_point(destructor:repro.proto.V3)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void V3::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void V3::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void V3::Clear() {
// @@protoc_insertion_point(message_clear_start:repro.proto.V3)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.z_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* V3::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> V3::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_V3_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // double x = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(V3, _impl_.x_)}},
    // double y = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(V3, _impl_.y_)}},
    // double z = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 63, 0, PROTOBUF_FIELD_OFFSET(V3, _impl_.z_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double x = 1;
    {PROTOBUF_FIELD_OFFSET(V3, _impl_.x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double y = 2;
    {PROTOBUF_FIELD_OFFSET(V3, _impl_.y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double z = 3;
    {PROTOBUF_FIELD_OFFSET(V3, _impl_.z_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* V3::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:repro.proto.V3)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // double x = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  ::uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_x(), target);
  }

  // double y = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  ::uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_y(), target);
  }

  // double z = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_z = this->_internal_z();
  ::uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:repro.proto.V3)
  return target;
}

::size_t V3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:repro.proto.V3)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  ::uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 9;
  }

  // double y = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  ::uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 9;
  }

  // double z = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_z = this->_internal_z();
  ::uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData V3::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    V3::MergeImpl
};
const ::google::protobuf::Message::ClassData*V3::GetClassData() const { return &_class_data_; }


void V3::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<V3*>(&to_msg);
  auto& from = static_cast<const V3&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:repro.proto.V3)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_x = from._internal_x();
  ::uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_y = from._internal_y();
  ::uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_z = from._internal_z();
  ::uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void V3::CopyFrom(const V3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:repro.proto.V3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool V3::IsInitialized() const {
  return true;
}

void V3::InternalSwap(V3* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(V3, _impl_.z_)
      + sizeof(V3::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(V3, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::google::protobuf::Metadata V3::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Repro_2eproto_getter, &descriptor_table_Repro_2eproto_once,
      file_level_metadata_Repro_2eproto[0]);
}
// ===================================================================

class KeyPoint::_Internal {
 public:
  using HasBits = decltype(std::declval<KeyPoint>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(KeyPoint, _impl_._has_bits_);
  static const ::repro::proto::V3& color(const KeyPoint* msg);
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::repro::proto::V3& KeyPoint::_Internal::color(const KeyPoint* msg) {
  return *msg->_impl_.color_;
}
KeyPoint::KeyPoint(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:repro.proto.KeyPoint)
}
KeyPoint::KeyPoint(const KeyPoint& from) : ::google::protobuf::Message() {
  KeyPoint* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.color_){nullptr},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.color_ = new ::repro::proto::V3(*from._impl_.color_);
  }

  // @@protoc_insertion_point(copy_constructor:repro.proto.KeyPoint)
}
inline void KeyPoint::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.color_){nullptr},
  };
}
KeyPoint::~KeyPoint() {
  // @@protoc_insertion_point(destructor:repro.proto.KeyPoint)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void KeyPoint::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.color_;
}
void KeyPoint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void KeyPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:repro.proto.KeyPoint)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.color_ != nullptr);
    _impl_.color_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* KeyPoint::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> KeyPoint::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(KeyPoint, _impl_._has_bits_),
    0, // no _extensions_
    2, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967293,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_KeyPoint_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .repro.proto.V3 color = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(KeyPoint, _impl_.color_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .repro.proto.V3 color = 2;
    {PROTOBUF_FIELD_OFFSET(KeyPoint, _impl_.color_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::repro::proto::V3>()},
  }}, {{
  }},
};

::uint8_t* KeyPoint::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:repro.proto.KeyPoint)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .repro.proto.V3 color = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::color(this),
        _Internal::color(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:repro.proto.KeyPoint)
  return target;
}

::size_t KeyPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:repro.proto.KeyPoint)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .repro.proto.V3 color = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.color_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData KeyPoint::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    KeyPoint::MergeImpl
};
const ::google::protobuf::Message::ClassData*KeyPoint::GetClassData() const { return &_class_data_; }


void KeyPoint::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<KeyPoint*>(&to_msg);
  auto& from = static_cast<const KeyPoint&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:repro.proto.KeyPoint)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_color()->::repro::proto::V3::MergeFrom(
        from._internal_color());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void KeyPoint::CopyFrom(const KeyPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:repro.proto.KeyPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool KeyPoint::IsInitialized() const {
  return true;
}

void KeyPoint::InternalSwap(KeyPoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.color_, other->_impl_.color_);
}

::google::protobuf::Metadata KeyPoint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Repro_2eproto_getter, &descriptor_table_Repro_2eproto_once,
      file_level_metadata_Repro_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace repro
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
