// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Repro.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Repro_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_Repro_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_Repro_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_Repro_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_Repro_2eproto;
namespace repro {
namespace proto {
class KeyPoint;
struct KeyPointDefaultTypeInternal;
extern KeyPointDefaultTypeInternal _KeyPoint_default_instance_;
class V3;
struct V3DefaultTypeInternal;
extern V3DefaultTypeInternal _V3_default_instance_;
}  // namespace proto
}  // namespace repro
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace repro {
namespace proto {

// ===================================================================


// -------------------------------------------------------------------

class V3 final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:repro.proto.V3) */ {
 public:
  inline V3() : V3(nullptr) {}
  ~V3() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR V3(::google::protobuf::internal::ConstantInitialized);

  V3(const V3& from);
  V3(V3&& from) noexcept
    : V3() {
    *this = ::std::move(from);
  }

  inline V3& operator=(const V3& from) {
    CopyFrom(from);
    return *this;
  }
  inline V3& operator=(V3&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const V3& default_instance() {
    return *internal_default_instance();
  }
  static inline const V3* internal_default_instance() {
    return reinterpret_cast<const V3*>(
               &_V3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(V3& a, V3& b) {
    a.Swap(&b);
  }
  inline void Swap(V3* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(V3* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  V3* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<V3>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const V3& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const V3& from) {
    V3::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(V3* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "repro.proto.V3";
  }
  protected:
  explicit V3(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // double x = 1;
  void clear_x() ;
  double x() const;
  void set_x(double value);

  private:
  double _internal_x() const;
  void _internal_set_x(double value);

  public:
  // double y = 2;
  void clear_y() ;
  double y() const;
  void set_y(double value);

  private:
  double _internal_y() const;
  void _internal_set_y(double value);

  public:
  // double z = 3;
  void clear_z() ;
  double z() const;
  void set_z(double value);

  private:
  double _internal_z() const;
  void _internal_set_z(double value);

  public:
  // @@protoc_insertion_point(class_scope:repro.proto.V3)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double x_;
    double y_;
    double z_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Repro_2eproto;
};// -------------------------------------------------------------------

class KeyPoint final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:repro.proto.KeyPoint) */ {
 public:
  inline KeyPoint() : KeyPoint(nullptr) {}
  ~KeyPoint() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR KeyPoint(::google::protobuf::internal::ConstantInitialized);

  KeyPoint(const KeyPoint& from);
  KeyPoint(KeyPoint&& from) noexcept
    : KeyPoint() {
    *this = ::std::move(from);
  }

  inline KeyPoint& operator=(const KeyPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyPoint& operator=(KeyPoint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KeyPoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeyPoint* internal_default_instance() {
    return reinterpret_cast<const KeyPoint*>(
               &_KeyPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(KeyPoint& a, KeyPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyPoint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyPoint* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KeyPoint* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KeyPoint>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const KeyPoint& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const KeyPoint& from) {
    KeyPoint::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyPoint* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "repro.proto.KeyPoint";
  }
  protected:
  explicit KeyPoint(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColorFieldNumber = 2,
  };
  // .repro.proto.V3 color = 2;
  bool has_color() const;
  void clear_color() ;
  const ::repro::proto::V3& color() const;
  PROTOBUF_NODISCARD ::repro::proto::V3* release_color();
  ::repro::proto::V3* mutable_color();
  void set_allocated_color(::repro::proto::V3* value);
  void unsafe_arena_set_allocated_color(::repro::proto::V3* value);
  ::repro::proto::V3* unsafe_arena_release_color();

  private:
  const ::repro::proto::V3& _internal_color() const;
  ::repro::proto::V3* _internal_mutable_color();

  public:
  // @@protoc_insertion_point(class_scope:repro.proto.KeyPoint)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::repro::proto::V3* color_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Repro_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// V3

// double x = 1;
inline void V3::clear_x() {
  _impl_.x_ = 0;
}
inline double V3::x() const {
  // @@protoc_insertion_point(field_get:repro.proto.V3.x)
  return _internal_x();
}
inline void V3::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:repro.proto.V3.x)
}
inline double V3::_internal_x() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.x_;
}
inline void V3::_internal_set_x(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.x_ = value;
}

// double y = 2;
inline void V3::clear_y() {
  _impl_.y_ = 0;
}
inline double V3::y() const {
  // @@protoc_insertion_point(field_get:repro.proto.V3.y)
  return _internal_y();
}
inline void V3::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:repro.proto.V3.y)
}
inline double V3::_internal_y() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.y_;
}
inline void V3::_internal_set_y(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.y_ = value;
}

// double z = 3;
inline void V3::clear_z() {
  _impl_.z_ = 0;
}
inline double V3::z() const {
  // @@protoc_insertion_point(field_get:repro.proto.V3.z)
  return _internal_z();
}
inline void V3::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:repro.proto.V3.z)
}
inline double V3::_internal_z() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.z_;
}
inline void V3::_internal_set_z(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.z_ = value;
}

// -------------------------------------------------------------------

// KeyPoint

// .repro.proto.V3 color = 2;
inline bool KeyPoint::has_color() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.color_ != nullptr);
  return value;
}
inline void KeyPoint::clear_color() {
  if (_impl_.color_ != nullptr) _impl_.color_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::repro::proto::V3& KeyPoint::_internal_color() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::repro::proto::V3* p = _impl_.color_;
  return p != nullptr ? *p : reinterpret_cast<const ::repro::proto::V3&>(::repro::proto::_V3_default_instance_);
}
inline const ::repro::proto::V3& KeyPoint::color() const {
  // @@protoc_insertion_point(field_get:repro.proto.KeyPoint.color)
  return _internal_color();
}
inline void KeyPoint::unsafe_arena_set_allocated_color(::repro::proto::V3* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.color_);
  }
  _impl_.color_ = reinterpret_cast<::repro::proto::V3*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:repro.proto.KeyPoint.color)
}
inline ::repro::proto::V3* KeyPoint::release_color() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::repro::proto::V3* released = _impl_.color_;
  _impl_.color_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::repro::proto::V3* KeyPoint::unsafe_arena_release_color() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:repro.proto.KeyPoint.color)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::repro::proto::V3* temp = _impl_.color_;
  _impl_.color_ = nullptr;
  return temp;
}
inline ::repro::proto::V3* KeyPoint::_internal_mutable_color() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.color_ == nullptr) {
    auto* p = CreateMaybeMessage<::repro::proto::V3>(GetArenaForAllocation());
    _impl_.color_ = reinterpret_cast<::repro::proto::V3*>(p);
  }
  return _impl_.color_;
}
inline ::repro::proto::V3* KeyPoint::mutable_color() {
  ::repro::proto::V3* _msg = _internal_mutable_color();
  // @@protoc_insertion_point(field_mutable:repro.proto.KeyPoint.color)
  return _msg;
}
inline void KeyPoint::set_allocated_color(::repro::proto::V3* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::repro::proto::V3*>(_impl_.color_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::repro::proto::V3*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.color_ = reinterpret_cast<::repro::proto::V3*>(value);
  // @@protoc_insertion_point(field_set_allocated:repro.proto.KeyPoint.color)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace repro


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_Repro_2eproto_2epb_2eh
